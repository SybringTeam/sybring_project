@model List<sybring_project.Models.ViewModels.DayDataVM>


@{
    ViewData["Title"] = "Create";
}

<h1>Create Time Report</h1>

@using (Html.BeginForm("Create", "Time", FormMethod.Post))
{
    <hr />

    <!-- validation  -->
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <h2>Week 1</h2>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Date</th>
                <th>StartWork</th>
                <th>EndWork</th>
                <th>StartBrea</th>
                <th>EndBreak</th>
                <th>Total Working Hours </th>
                <th>WorkingHours</th>
                <th>FlexiTime</th>
                <th>MoreTime</th>
                <th>Attendance</th>
                <th>AnnualLea</th>
                <th>SickLeave</th>
                <th>Absence </th>
                <th>Childcare</th>
                <th>Overtime</th>
                <th>InconvenientHours</th>
                <!-- Add a new column for validation messages -->
                <th>Validation Message</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Count; i++)
            {
                <tr>
                    <td>@Model[i].Date.DayOfWeek</td>

                    <td>@Html.HiddenFor(m => m[i].Date) @Model[i].Date.ToShortDateString()</td>
                    <td>@Html.TextBoxFor(m => m[i].StartWork, new { type = "time" })</td>
                    <td>@Html.TextBoxFor(m => m[i].EndWork, new { type = "time" })</td>
                    <td>@Html.TextBoxFor(m => m[i].StartBreak, new { type = "time" })</td>
                    <td>@Html.TextBoxFor(m => m[i].EndBreak, new { type = "time" })</td>
                    <td>@Html.TextBoxFor(m => m[i].WorkingHours,new {type = "time" })</td>
                    <td id="workingHours">@Model[i].WorkingHours</td>
                    <td id="totalWorkingHours">@Model[i].TotalWorkingHours</td>
                  
                    <td>@Html.TextBoxFor(m => m[i].MoreTime, new { type = "time" })</td>

                    <td>@Html.ValidationMessageFor(m => m[i].StartWork, "", new { @class = "text-danger" })</td>
                </tr>
            }
            else
            {
            <tr>
                <td colspan="7">No data available</td>
            </tr>
            }
        </tbody>
    </table>

   

    <input type="hidden" name="userId" value="user_id_here" /> <!-- Replace "user_id_here" with the actual user ID -->
    <button type="submit" class="btn btn-primary">Submit</button>

    <a asp-action="Index">Back to List</a>
}
<script>

    // Calculate and display working hours dynamically
    $(document).ready(function() {
        $('input[type="time"]').change(function() {
            var startTime = $(this).closest('tr').find('input[name$=".StartWork"]').val();
            var endTime = $(this).closest('tr').find('input[name$=".EndWork"]').val();
            var startBreak = $(this).closest('tr').find('input[name$=".StartBreak"]').val();
            var endBreak = $(this).closest('tr').find('input[name$=".EndBreak"]').val();

            var workingHours = calculateWorkingHours(startTime, endTime, startBreak, endBreak);
            $(this).closest('tr').find('#workingHours').text(workingHours);
        });

        function calculateWorkingHours(startTime, endTime, startBreak, endBreak) {
            // Your calculation logic for working hours
            // Convert times to DateTime objects and calculate the difference
            var startDateTime = new Date("1970-01-01T" + startTime + "Z");
            var endDateTime = new Date("1970-01-01T" + endTime + "Z");
            var startBreakDateTime = new Date("1970-01-01T" + startBreak + "Z");
            var endBreakDateTime = new Date("1970-01-01T" + endBreak + "Z");

            var totalHours = (endDateTime - startDateTime) / (1000 * 60 * 60); // Convert milliseconds to hours
            var breakHours = (endBreakDateTime - startBreakDateTime) / (1000 * 60 * 60); // Convert milliseconds to hours

            // Subtract break hours from total hours
            var workingHours = totalHours - breakHours;

            return workingHours.toFixed(2); // Round to two decimal places
        }
    });
</script>
