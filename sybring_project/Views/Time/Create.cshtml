@model List<sybring_project.Models.ViewModels.DayDataVM>

@{
    ViewData["Title"] = "Create";
}


<style>
    .table-container {
        display: flex;
        margin-bottom: 20px;
    }

    .data-column {
        flex-grow: 1;
        overflow-x: auto;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 10px;
        border: 1px solid #ccc;
        text-align: center;
    }

    .header-row th {
        background-color: #f0f0f0;
    }

    .date-cell {
        min-width: 100px;
    }
</style>

<h1>Create Time Report</h1>

<h4>Select Week</h4>
<select id="weekNumber"></select>

@using (Html.BeginForm("Create", "Time", FormMethod.Post))
{
    <hr />

    <!-- Validation summary -->
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="table-container">
        <div class="header-column">
            <div class="header-cell">PAY</div>
            <div class="header-cell">Date</div>
            <div class="header-cell">StartWork</div>
            <div class="header-cell">EndWork</div>
            <div class="header-cell">StartBreak</div>
            <div class="header-cell">EndBreak</div>
            <div class="header-cell">Total Working Hours</div>
            <div class="header-cell">WorkingHours</div>     
            <div class="header-cell">FlexiTime</div>
            <div class="header-cell">MoreTime</div>
            <div class="header-cell">Attendance</div>
            <div class="header-cell">AnnualLeave</div>
            <div class="header-cell">SickLeave</div>
            <div class="header-cell">Absence</div>
            <div class="header-cell">Childcare</div>
            <div class="header-cell">Overtime</div>
            <div class="header-cell">InconvenientHours</div>
            <div class="header-cell">Validation Message</div>
        </div>
        <div class="data-column">
            <table class="table">
                <tbody id="weekDaysBody">             
                    @for (int i = 0; i < Model.Count; i++)
                    {                       
                        <td class="weekday-column">@Model[i].Date.DayOfWeek</td>
                  
                    }
                    <tr></tr>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                        <td class="date-column" id="@Model[i].Date.ToString("yyyy-MM-dd")">@Model[i].Date.ToShortDateString()</td>                            
                    }

                <tr></tr>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                            <td class="data-cell">@Html.TextBoxFor(m => m[i].StartWork, new { type = "time" })</td>
                    }
                <tr></tr>
                    @for (int i = 0; i < Model.Count; i++)
                    {

                    <td class="data-cell">@Html.TextBoxFor(m => m[i].EndWork, new { type = "time" })</td>
                    }
                <tr></tr>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                            <td class="data-cell">@Html.TextBoxFor(m => m[i].StartBreak, new { type = "time" })</td>
                    }
                <tr></tr>
                    @for (int i = 0; i < Model.Count; i++)
                    {

                            <td class="data-cell">@Html.TextBoxFor(m => m[i].EndBreak, new { type = "time" })</td>
                    }
                <tr></tr>
                    @for (int i = 0; i < Model.Count; i++)
                    {

                            <td class="data-cell">@Html.TextBoxFor(m => m[i].WorkingHours, new { type = "time" })</td>
                    }
                <tr></tr>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                            <td class="data-cell" id="workingHours">@Model[i].WorkingHours</td>
                    }
                <tr></tr>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                            <td class="data-cell" id="totalWorkingHours">@Model[i].TotalWorkingHours</td>
                    }
                <tr></tr>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                            <td class="data-cell">@Html.TextBoxFor(m => m[i].Overtime, new { type = "time" })</td>

                    }
                <tr></tr>
                    @for (int i = 0; i < Model.Count; i++)
                    {

                            <td class="data-cell">@Html.TextBoxFor(m => m[i].MoreTime, new { type = "time" })</td>

                    }
                <tr></tr>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                            <td class="validation-cell">@Html.ValidationMessageFor(m => m[i].StartWork, "", new { @class = "text-danger" })</td>
                    
                    }
                        
                       

                </tbody>
            </table>
        </div>
    </div>

    
    <input type="hidden" name="userId" value="user_id_here" /> 
    <button type="submit" class="btn btn-primary">Submit</button>
    <a asp-action="Index">Back to List</a>
}





@* 
It displays date based on select week *@

<script>
    // Fetch red days data from the API
    fetch('https://sholiday.faboul.se/dagar/v2.1/2024')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            console.log('API Response:', data);

            const allDays = data.dagar;

            
            const weekNumbers = new Set(allDays.map(day => parseInt(day.vecka)).filter(weekNumber => !isNaN(weekNumber)));
            const selectElement = document.getElementById('weekNumber');
            weekNumbers.forEach(weekNumber => {
                const option = document.createElement('option');
                option.textContent = 'Week ' + weekNumber;
                option.value = weekNumber;
                selectElement.appendChild(option);
            });

            // dropdown

            selectElement.addEventListener('change', function () {
                const selectedWeek = parseInt(this.value);

                
                const selectedWeekDays = allDays.filter(day => parseInt(day.vecka) === selectedWeek);

                
                const dateCells = document.querySelectorAll('#weekDaysBody td.date-column');
                const weekdayCells = document.querySelectorAll('#weekDaysBody td.weekday-column');


                //chages date to red
                        
                dateCells.forEach((cell, index) => {                 
                    const currentDate = selectedWeekDays[index].datum;
                    cell.textContent = currentDate;
                    const isRedDay = selectedWeekDays[index]['röd dag'] === 'Ja';
                    if (isRedDay) {
                        cell.style.color = 'red';
                    } else {
                        cell.style.color = 'black';
                    }

                    var daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
                    for (var i = 0; i < daysOfWeek.length; i++) {
                        var dayElement = document.getElementById(daysOfWeek[i]);
                        dayElement.innerText = selectedWeekDays[i].datum;
                        dayElement.value = selectedWeekDays[i].datum;
                    }
                    console.log(daysOfWeek)

                                   
                  @*   var weekday = document.getElementById("Monday");            
                    weekday.innerText = currentDate;
                    weekday.value = currentDate;       *@   
                    
                });

                  
                //changes weekday to red

                weekdayCells.forEach((cell, index) => {
                    const currentWeekday = selectedWeekDays[index].veckodag;
                    const isRedDay = selectedWeekDays[index]['röd dag'] === 'Ja';
                    cell.textContent = currentWeekday;
                    if (isRedDay) {
                        cell.style.color = 'red';
                    } else {
                        cell.style.color = 'black';
                    }
                });
            });
        })
        .catch(error => {
            console.error('Error fetching data:', error);
        });
</script>


