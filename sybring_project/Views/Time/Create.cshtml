@model List<sybring_project.Models.ViewModels.DayDataVM>

@{
    ViewData["Title"] = "Create";
}


<style>
    .table-container {
        display: flex;
        margin-bottom: 20px;
    }

    .data-column {
        flex-grow: 1;
        overflow-x: auto;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 10px;
        border: 1px solid #ccc;
        text-align: center;
    }

    .header-row th {
        background-color: #f0f0f0;
    }

    .date-cell {
        min-width: 100px;
    }
</style>

<h1>Create Time Report</h1>

<h4>Select Week</h4>
<select id="weekNumber"></select>


<div style="display: flex; justify-content: flex-end;">
    <button id="set-working-hours-btn">choose alternative option to fill</button>
</div>


@using (Html.BeginForm("Create", "Time", FormMethod.Post))
{
    <hr />

    <!-- Validation summary -->
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


    <div class="table-container">
       
        <div class="data-column">
            <table class="table">
                <tbody id="weekDaysBody">
                <td class="header-cell" colspan="2">DAY</td>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                    <input type="hidden" asp-for="@Model[i].Date" id="@Model[i].Date.DayOfWeek" />

                     <!-- DAY column -->

                    <td class="weekday-column">@Model[i].Date.DayOfWeek</td>

                    }
                <tr></tr>
                <td class="header-cell" colspan="2">Date</td>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                        <!-- Date column -->

                    <td class="date-column" id="@Model[i].Date.ToString("yyyy-MM-dd")">@Model[i].Date.ToShortDateString()</td>
                    }

                <tr></tr>
                <td class="header-cell" colspan="2">Start Time</td>
                    @for (int i = 0; i < Model.Count; i++)
                    {

                        <!-- Start Time column -->

                    <td class="data-cell">@Html.TextBoxFor(m => m[i].StartWork, new { type = "time" ,@class = "work-time" })</td>
                    }
                <tr></tr>
                <td class="header-cell" colspan="2">End Time</td>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                         <!-- End Time column -->

                    <td class="data-cell">@Html.TextBoxFor(m => m[i].EndWork, new { type = "time", @class = "work-time" })</td>
                    }
                <tr></tr>      

                <td class="header-cell" colspan="2">Lunch Start</td>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                        <!-- Lunch Start column -->

                    <td class="data-cell">@Html.TextBoxFor(m => m[i].StartBreak, new { type = "time", @class = "work-time" })</td>
                    }
                <tr></tr>
                <td class="header-cell" colspan="2">Lunch End</td>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                         <!-- Lunch End column -->

                    <td class="data-cell">@Html.TextBoxFor(m => m[i].EndBreak, new { type = "time", @class = "work-time" })</td>
                    }

                <tr></tr>
                <td class="header-cell" colspan="2">WorkingHours(EveryDay)</td>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                        <!-- Working Hours column -->

                    <td class="data-cell" id="workingHours">@Model[i].WorkingHours</td>
                    }



                <tr></tr>
                <td class="header-cell" colspan="2">Total Working Hours(alternate Option) </td>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                        <!-- Total Working Hours column -->

                    <td class="data-cell">@Html.TextBoxFor(m => m[i].TotalWorkingHours, new { type = "text" ,size = "4" })</td>
                    }
                
                <tr></tr>
                <td class="header-cell" colspan="2">FlexiTime</td>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                        <!-- FlexiTime column -->
                <td class="data-cell">@Html.TextBoxFor(m => m[i].FlexiTime, new { type = "text" ,size = "4" })</td>
                    }
                <tr></tr>
                <td class="header-cell" colspan="2">OverTime</td>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                        <!-- Overtime column -->
                    <td class="data-cell">@Html.TextBoxFor(m => m[i].Overtime, new { type = "text" ,size = "4" })</td>

                    }
                <tr></tr>
                <td class="header-cell" colspan="2">MoreTime</td>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                    <!-- MoreTime column -->
                    <td class="data-cell">@Html.TextBoxFor(m => m[i].MoreTime, new { type = "time", size = "4" })</td>

                    }
                <tr></tr>
                <td class="header-cell" colspan="2"></td>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                    <td class="validation-cell">@Html.ValidationMessageFor(m => m[i].StartWork, "", new { @class = "text-danger" })</td>

                    }

                

                </tbody>
            </table>
        </div>
    </div>





    <input type="hidden" name="userId" value="user_id_here" /> 
    <button type="submit" class="btn btn-primary">Submit</button>
    <a asp-action="Index">Back to List</a>
}





@* 
It displays date based on select week *@

<script>
    // Fetch red days data from the API
    fetch('https://sholiday.faboul.se/dagar/v2.1/2024')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            console.log('API Response:', data);

            const allDays = data.dagar;

            
            const weekNumbers = new Set(allDays.map(day => parseInt(day.vecka)).filter(weekNumber => !isNaN(weekNumber)));
            const selectElement = document.getElementById('weekNumber');
            weekNumbers.forEach(weekNumber => {
                const option = document.createElement('option');
                option.textContent = 'Week ' + weekNumber;
                option.value = weekNumber;
                selectElement.appendChild(option);
            });

            // dropdown

            selectElement.addEventListener('change', function () {
                const selectedWeek = parseInt(this.value);
                const selectedWeekDays = allDays.filter(day => parseInt(day.vecka) === selectedWeek);

                // Redefine dateCells and weekdayCells within the event listener
                const dateCells = document.querySelectorAll('#weekDaysBody td.date-column');
                const weekdayCells = document.querySelectorAll('#weekDaysBody td.weekday-column');

                // Update date cells
                dateCells.forEach((cell, index) => {
                    const currentDate = selectedWeekDays[index].datum;
                    cell.textContent = currentDate;
                    const isRedDay = selectedWeekDays[index]['röd dag'] === 'Ja';
                    cell.style.color = isRedDay ? 'red' : 'black';


                    var daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
                    for (var i = 0; i < daysOfWeek.length; i++) {
                        var dayElement = document.getElementById(daysOfWeek[i]);
                        dayElement.innerText = selectedWeekDays[i].datum;
                        dayElement.value = selectedWeekDays[i].datum;
                    }
                    console.log(daysOfWeek)

                    
                });

                // Update weekday cells
                weekdayCells.forEach((cell, index) => {
                    const currentWeekday = selectedWeekDays[index].veckodag;
                    const isRedDay = selectedWeekDays[index]['röd dag'] === 'Ja';
                    cell.textContent = currentWeekday;
                    cell.style.color = isRedDay ? 'red' : 'black';
                });



        @*  // Disable columns corresponding to red days
                    const redDaysIndices = selectedWeekDays
                    .map((day, index) => (day['röd dag'] === 'Ja' ? index : -1))
                    .filter(index => index !== -1);

                    const columnCount = selectedWeekDays.length;
                    const workInputs = document.querySelectorAll('.work-time');
                    workInputs.forEach((input, inputIndex) => {
                    const columnIndex = inputIndex % columnCount;
                    if (redDaysIndices.includes(columnIndex)) {
                    input.disabled = true;
                    } else {
                    input.disabled = false;
                    }
                    });
 *@







            });
        })
        .catch(error => {
            console.error('Error fetching data:', error);
        });


    // Function to reset TotalWorkingHours to 0 and WorkingHours to 0 and disable the respective textboxes
     function resetAndDisableFields() {
         // Reset TotalWorkingHours to 0 and disable
         const totalWorkingHoursInputs = document.querySelectorAll('.data-cell#totalWorkingHours input');
         totalWorkingHoursInputs.forEach(input => {
             input.value = '0';
             input.disabled = true;
             input.readOnly = true; // Make the textbox non-editable
         });

         // Reset WorkingHours to 0 and disable
         const workingHoursInputs = document.querySelectorAll('.data-cell#workingHours input');
         workingHoursInputs.forEach(input => {
             input.value = '0';
             input.disabled = true; // Disable the input field for WorkingHours
             input.readOnly = true; // Make the textbox non-editable
         });
     }

     // Function to enable TotalWorkingHours and WorkingHours and set WorkingHours to 8
function enableFields() {
    // Enable TotalWorkingHours and WorkingHours
    const totalWorkingHoursInputs = document.querySelectorAll('.data-cell#totalWorkingHours input');
    totalWorkingHoursInputs.forEach(input => {
        input.disabled = false;
        input.readOnly = false;
        input.value = '0'; // Reset TotalWorkingHours to 0 when enabled
    });

    // Reset WorkingHours to 8
    const workingHoursCells = document.querySelectorAll('.data-cell#workingHours');
    workingHoursCells.forEach(cell => {
        cell.textContent = '8';
        const input = cell.querySelector('input');
        input.readOnly = false; // Allow editing
        input.value = '8'; // Set WorkingHours to 8
    });
}


// Button click event listener

const button = document.getElementById('set-working-hours-btn');
button.addEventListener('click', function () {

    // Toggle disabled state of StartWork, EndWork, StartBreak, and EndBreak input fields

    const workInputs = document.querySelectorAll('.work-time');
    workInputs.forEach(input => {
        input.disabled = !input.disabled;
    });

    // Reset or set WorkingHours and TotalWorkingHours based on the current state
    const workingHoursCells = document.querySelectorAll('.data-cell#workingHours');
    const totalWorkingHoursInputs = document.querySelectorAll('.data-cell#totalWorkingHours input');

    if (workInputs[0].disabled) {

        // If inputs are disabled, set WorkingHours to 8 and TotalWorkingHours to 0
        workingHoursCells.forEach(cell => {
            cell.textContent = '8';
        });

        totalWorkingHoursInputs.forEach(input => {
            input.disabled = false;
          input.removeAttribute('readonly');
            input.value = '0';
        });
    } else {

        // If inputs are enabled, set WorkingHours to 0 and TotalWorkingHours to 0
        workingHoursCells.forEach(cell => {
            cell.textContent = '0';
            
        });

        totalWorkingHoursInputs.forEach(input => {
             input.setAttribute('readonly', true);
         input.disabled = true;
            input.value = '0';
        });
    }
});







</script>


